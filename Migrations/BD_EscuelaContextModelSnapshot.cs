// <auto-generated />
using System;
using BD_Escuela.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BD_Escuela.Migrations
{
    [DbContext(typeof(BD_EscuelaContext))]
    partial class BD_EscuelaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AsignaturasProfesor", b =>
                {
                    b.Property<int>("AsignaturasImpartidasId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesoresId")
                        .HasColumnType("int");

                    b.HasKey("AsignaturasImpartidasId", "ProfesoresId");

                    b.HasIndex("ProfesoresId");

                    b.ToTable("AsignaturasProfesor");
                });

            modelBuilder.Entity("BD_Escuela.Models.Administrador", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Administrador");
                });

            modelBuilder.Entity("BD_Escuela.Models.Asignaturas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Creditos")
                        .HasColumnType("int");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Asignaturas");
                });

            modelBuilder.Entity("BD_Escuela.Models.Cursos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Creditos")
                        .HasColumnType("int");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("BD_Escuela.Models.Estudiantes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Estudiantes");
                });

            modelBuilder.Entity("BD_Escuela.Models.Notas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AsignaturasId")
                        .HasColumnType("int");

                    b.Property<float>("Calificacion")
                        .HasColumnType("real");

                    b.Property<int>("Estudiantesid")
                        .HasColumnType("int");

                    b.Property<int>("IdAsignaturas")
                        .HasColumnType("int");

                    b.Property<int>("IdEstudiantes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturasId");

                    b.HasIndex("Estudiantesid");

                    b.ToTable("Notas");
                });

            modelBuilder.Entity("BD_Escuela.Models.Profesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Especialidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profesor");
                });

            modelBuilder.Entity("BD_Escuela.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Administradorid")
                        .HasColumnType("int");

                    b.Property<string>("Contraseña")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfesorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Administradorid");

                    b.HasIndex("ProfesorId")
                        .IsUnique()
                        .HasFilter("[ProfesorId] IS NOT NULL");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("CursosEstudiantes", b =>
                {
                    b.Property<int>("CursosInscritosId")
                        .HasColumnType("int");

                    b.Property<int>("EstudiantesInscritosId")
                        .HasColumnType("int");

                    b.HasKey("CursosInscritosId", "EstudiantesInscritosId");

                    b.HasIndex("EstudiantesInscritosId");

                    b.ToTable("CursosEstudiantes");
                });

            modelBuilder.Entity("AsignaturasProfesor", b =>
                {
                    b.HasOne("BD_Escuela.Models.Asignaturas", null)
                        .WithMany()
                        .HasForeignKey("AsignaturasImpartidasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BD_Escuela.Models.Profesor", null)
                        .WithMany()
                        .HasForeignKey("ProfesoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BD_Escuela.Models.Estudiantes", b =>
                {
                    b.HasOne("BD_Escuela.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BD_Escuela.Models.Notas", b =>
                {
                    b.HasOne("BD_Escuela.Models.Asignaturas", "Asignaturas")
                        .WithMany("Notas")
                        .HasForeignKey("AsignaturasId");

                    b.HasOne("BD_Escuela.Models.Estudiantes", "Estudiantes")
                        .WithMany("Notas")
                        .HasForeignKey("Estudiantesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignaturas");

                    b.Navigation("Estudiantes");
                });

            modelBuilder.Entity("BD_Escuela.Models.Usuario", b =>
                {
                    b.HasOne("BD_Escuela.Models.Administrador", null)
                        .WithMany("UsuariosAsignados")
                        .HasForeignKey("Administradorid");

                    b.HasOne("BD_Escuela.Models.Profesor", "Profesor")
                        .WithOne("Usuario")
                        .HasForeignKey("BD_Escuela.Models.Usuario", "ProfesorId");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("CursosEstudiantes", b =>
                {
                    b.HasOne("BD_Escuela.Models.Cursos", null)
                        .WithMany()
                        .HasForeignKey("CursosInscritosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BD_Escuela.Models.Estudiantes", null)
                        .WithMany()
                        .HasForeignKey("EstudiantesInscritosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BD_Escuela.Models.Administrador", b =>
                {
                    b.Navigation("UsuariosAsignados");
                });

            modelBuilder.Entity("BD_Escuela.Models.Asignaturas", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("BD_Escuela.Models.Estudiantes", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("BD_Escuela.Models.Profesor", b =>
                {
                    b.Navigation("Usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
